{
  "createdAt": "2025-05-11T17:19:45.823Z",
  "id": "KCXfXlQISQRIQTXB",
  "name": "AccountingTask",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2220,
        240
      ],
      "id": "3172fd0c-d5ff-4d9f-95cc-64ac90ba0eff",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -1460,
        260
      ],
      "id": "82d2e31a-163c-4015-b788-f5bd67652143",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $json.main.app.channelId }}",
          "mode": "id"
        },
        "message": "=üßæ\n{{ $json.output }}",
        "approvalOptions": {
          "values": {
            "approvalType": "double"
          }
        },
        "options": {
          "limitWaitTime": {
            "values": {
              "resumeAmount": 3,
              "resumeUnit": "minutes"
            }
          },
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -860,
        20
      ],
      "id": "35f09c87-204b-4038-8825-6ae034e19767",
      "name": "Slack",
      "webhookId": "082c403b-ef34-4f72-910e-a36661a4ab2f",
      "credentials": {
        "slackApi": {
          "id": "nq9l1vLjoG9bmDhB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c3b6de7-33d3-4996-bafc-7c5a9c18ff0e",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -560,
        20
      ],
      "id": "f8e938ba-c69b-4796-bba4-0fd13f3aa44e",
      "name": "If"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Merge').item.json.main.app.channelId }}",
          "mode": "id"
        },
        "text": "‚úÖ *Done*",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Merge').item.json.main.app.eventTime }}",
              "reply_broadcast": true
            }
          },
          "mrkdwn": true
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -260,
        -80
      ],
      "id": "6ecd3498-8c32-4e07-9783-d6f1ff6147ba",
      "name": "Slack1",
      "webhookId": "082c403b-ef34-4f72-910e-a36661a4ab2f",
      "executeOnce": true,
      "credentials": {
        "slackApi": {
          "id": "nq9l1vLjoG9bmDhB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "={{ $('Merge').item.json.main.app.channelId }}",
          "mode": "id"
        },
        "text": "‚õî *Cancelled*",
        "otherOptions": {
          "thread_ts": {
            "replyValues": {
              "thread_ts": "={{ $('Merge').item.json.main.app.eventTime }}",
              "reply_broadcast": true
            }
          },
          "mrkdwn": true
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        -260,
        120
      ],
      "id": "7a2445e9-8e02-447c-b72e-612ddc9ce9b1",
      "name": "Slack2",
      "webhookId": "082c403b-ef34-4f72-910e-a36661a4ab2f",
      "credentials": {
        "slackApi": {
          "id": "nq9l1vLjoG9bmDhB",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c3b6de7-33d3-4996-bafc-7c5a9c18ff0e",
              "leftValue": "={{ $json.data.approved }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -260,
        500
      ],
      "id": "f845dcca-081c-43c8-81ec-98a70cf198a2",
      "name": "If1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Merge').item.json.main.app.chatId }}",
        "text": "=‚úÖ *Done*",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2",
          "reply_to_message_id": "={{ $('Merge').item.json.main.app.messageId }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3040,
        460
      ],
      "id": "5e0d4cf8-f6c3-4bde-bf41-3af8a846e1ad",
      "name": "Telegram1",
      "webhookId": "bd5b2879-d9d5-4a48-b94f-eeb2906792bd",
      "credentials": {
        "telegramApi": {
          "id": "yF5Q4queu1lhvJeB",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $json.main.app.chatId }}",
        "message": "=üßæ\n{{ $json.output }}",
        "approvalOptions": {
          "values": {
            "approveLabel": "‚ùå Decline"
          }
        },
        "options": {
          "limitWaitTime": {
            "values": {
              "resumeAmount": 0,
              "resumeUnit": "minutes"
            }
          },
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -860,
        500
      ],
      "id": "5b7ca959-b9df-4582-9369-b035f7f7ef33",
      "name": "Telegram",
      "webhookId": "bd5b2879-d9d5-4a48-b94f-eeb2906792bd",
      "credentials": {
        "telegramApi": {
          "id": "yF5Q4queu1lhvJeB",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Merge').item.json.main.app.chatId }}",
        "text": "=‚õî *Cancelled*",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "MarkdownV2",
          "reply_to_message_id": "={{ $('Merge').item.json.main.app.messageId }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        40,
        340
      ],
      "id": "278d8a79-8e27-421e-ae91-ca0f77455a45",
      "name": "Telegram2",
      "webhookId": "bd5b2879-d9d5-4a48-b94f-eeb2906792bd",
      "credentials": {
        "telegramApi": {
          "id": "yF5Q4queu1lhvJeB",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.main.app.type }}",
                    "rightValue": "slack",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "b7478633-c5b5-4c01-b0e4-9e3e13dcf1a0"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "slack"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e3919d96-7a1a-46bd-a742-1bb8253a5657",
                    "leftValue": "={{ $json.main.app.type }}",
                    "rightValue": "telegram",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "telegram"
            }
          ]
        },
        "options": {
          "fallbackOutput": "none",
          "ignoreCase": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1160,
        260
      ],
      "id": "f02b6817-9c27-4418-8c9d-6857d198b927",
      "name": "appRule"
    },
    {
      "parameters": {
        "modelName": "=models/{{ $json.main.vars.ai.google.generalModel }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -2080,
        580
      ],
      "id": "58736737-c11b-4f9d-8423-77554701a398",
      "name": "Gemini Model",
      "credentials": {
        "googlePalmApi": {
          "id": "uyOs56MFdKYyE9ZM",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract information from the invoice or order (or both) image and format the output as (N/A if the field is not available or empty)\nOrder: <order number without PO number> | <order date converted from dd/MM/yyyy to MM/dd/yyyy format> | <purchase order code which is string with \\\"PO\\\" embedded or related to PO number> | <address of customer>\nInvoice: <invoice number> | <invoice date converted from dd/MM/yyyy to MM/dd/yyyy format> | <company name of customer or buyer>\n- <name of goods and services in invoice> -- <capacity or volume format as \\\"1L\\\", \\\"2L\\\", \\\"5L\\\" and so on> -- <quantity converted to number> -- <unit price follows original format or N/A if the field is empty>",
        "options": {
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1920,
        380
      ],
      "id": "239f9d4f-6b56-4f85-842d-d2da470ed876",
      "name": "Accounting Extractor Agent"
    },
    {
      "parameters": {
        "jsCode": "const codeMap = {\n  '1L'   : 'TP0001',\n  '2L'   : 'TP0002',\n  '5L'   : 'TP0003',\n};\n\nconst result = $input.all().map(item => {\n  const items = [];\n  const lines = item.json.output.split('\\n');\n  \n  lines\n    .filter(line => line.trim() !== '' && line.includes('--') && !line.trim().endsWith('N/A'))\n    .map(line => {\n      const parts = line.replace('-', '').split('--').map(part => part.trim());\n      const [name, capacity, quantity, unitPrice] = parts;\n      \n      const code = capacity in codeMap ? codeMap[capacity] : '';\n\n      return {\n        name: name,\n        code: code,\n        quantity: quantity,\n        unitPrice: unitPrice,\n        optName: '',\n        optCode: '',\n        optQuantity: '',\n      };\n    })\n    .forEach(i => items.push(i));\n\n  var i = 0;\n  lines\n    .filter(line => line.trim() !== '' && line.includes('--') && line.trim().endsWith('N/A'))\n    .forEach(line => {\n      const parts = line.replace('-', '').split('--').map(part => part.trim());\n      const [name, capacity, quantity] = parts;\n      \n      const code = capacity in codeMap ? codeMap[capacity] : '';\n\n      items[i].optName = name;\n      items[i].optCode = code;\n      items[i].optQuantity = quantity;\n\n      ++i;\n    });\n\n  const orderParts = lines[0].replace('Order:', '').split('|').map(part => part.trim());\n  const [orderCode, orderDate, poCode, customerAddress] = orderParts;\n\n  const invoiceParts = lines[1].replace('Invoice:', '').split('|').map(part => part.trim());\n  const [invoiceCode, invoiceDate, customerName] = invoiceParts;\n\n  const dt = invoiceDate === 'N/A' ? DateTime.fromFormat(orderDate, 'MM/dd/yyyy') : DateTime.fromFormat(invoiceDate, 'MM/dd/yyyy');\n  const sheet = dt.month.toString().padStart(2, '0') + '/' + dt.year.toString();\n\n  return {\n    json: {\n      ...item.json,\n      output: {\n        sheet: sheet,\n        order: {\n          code: orderCode,\n          po: poCode.replace('P0', 'PO'),\n          date: orderDate,\n          address: customerAddress.replaceAll(', ', ','),\n        },\n        invoice: {\n          code: invoiceCode,\n          date: invoiceDate,\n          customer: customerName,\n        },\n        items: items,\n      },\n    }\n  }\n});\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1240,
        460
      ],
      "id": "3d6deffd-f74e-4342-87dd-e1a883b480df",
      "name": "parseInvoiceInfo",
      "executeOnce": false
    },
    {
      "parameters": {
        "fieldToSplitOut": "output.items",
        "include": "allOtherFields",
        "options": {
          "destinationFieldName": "item"
        }
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1540,
        460
      ],
      "id": "d4e5c2f8-bc69-49aa-bde5-45ac035ec8ac",
      "name": "splitItems"
    },
    {
      "parameters": {
        "operation": "create",
        "documentId": {
          "__rl": true,
          "value": "1WgGnaWc2vrYeVhJMLS6wGLr62_LaTs5K1XYMlbKHu64",
          "mode": "id"
        },
        "title": "={{ $json.output.sheet }}",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1840,
        240
      ],
      "id": "233b7787-42b7-4f2b-b105-3036ad11a768",
      "name": "createSheet",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QPWCBEBd1gVee3YC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        2740,
        440
      ],
      "id": "bdf09d7c-e049-492e-8d70-8d7fdcd2da6a",
      "name": "Merge1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "306177ba-44d3-46a8-ba46-ddcc2e2b9501",
              "name": "Customer",
              "value": "={{ $json.output.invoice.customer }} ({{ $json.output.order.address }})",
              "type": "string"
            },
            {
              "id": "bfc69c18-460b-4355-8999-477efd8e8b2c",
              "name": "Order Date",
              "value": "={{ $json.output.order.date }}",
              "type": "string"
            },
            {
              "id": "761bb2fc-d28d-4729-bbb0-68453679d1e1",
              "name": "Order",
              "value": "={{ $json.output.order.code }}",
              "type": "string"
            },
            {
              "id": "649ec9d6-23dd-430f-9def-d6377e9e1e2a",
              "name": "PO Code",
              "value": "={{ $json.output.order.po }}",
              "type": "string"
            },
            {
              "id": "9705bec4-c032-400a-987e-340495a6cdc0",
              "name": "Market Code",
              "value": "==VLOOKUP(\"{{ $json.output.order.address }}\",MARKET!$A$1:$B$500,2,TRUE)",
              "type": "string"
            },
            {
              "id": "f968f342-f949-46e8-aae1-d22be3417ecc",
              "name": "Invoice Date",
              "value": "={{ $json.output.invoice.date }}",
              "type": "string"
            },
            {
              "id": "ccbd7dab-1450-4053-9f7c-3fe4952c296a",
              "name": "Invoice",
              "value": "={{ $json.output.invoice.code }}",
              "type": "string"
            },
            {
              "id": "9f48bd32-e2fb-48f2-8cb8-c7c81a86e316",
              "name": "Code",
              "value": "={{ $json.item.code }}",
              "type": "string"
            },
            {
              "id": "f1e7baec-7315-414c-9966-777c721c787d",
              "name": "Quantity",
              "value": "={{ $json.item.quantity }}",
              "type": "string"
            },
            {
              "id": "6335b527-d8a1-4518-ae44-266f8c438c35",
              "name": "Unit Price",
              "value": "={{ $json.item.unitPrice }}",
              "type": "string"
            },
            {
              "id": "84fd223e-b07a-4032-8047-1f12fe3a6d29",
              "name": "KM Code",
              "value": "={{ $json.item.optCode }}",
              "type": "string"
            },
            {
              "id": "fc05b53a-e09d-46ee-9618-18fbb40d7020",
              "name": "KM Quantity",
              "value": "={{ $json.item.optQuantity }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1840,
        460
      ],
      "id": "40561415-206f-43d8-9956-9a1e00054c13",
      "name": "setItemData"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1WgGnaWc2vrYeVhJMLS6wGLr62_LaTs5K1XYMlbKHu64",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('parseInvoiceInfo').item.json.output.sheet }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2140,
        460
      ],
      "id": "f8632f3a-c97e-44f2-8ae3-83f9be2add53",
      "name": "appendItemToSheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QPWCBEBd1gVee3YC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "propertyName": "cachedOutput",
        "key": "={{ $json.main.app.mediaGroupSessionId }}",
        "keyType": "string",
        "options": {}
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        40,
        660
      ],
      "id": "f476d612-5115-4aa8-a2d5-1e0637e80efa",
      "name": "Redis",
      "credentials": {
        "redis": {
          "id": "J8VDBDm0YDijlL9C",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "68e166e0-7d5b-48d6-89dd-4b9dbff96108",
              "leftValue": "={{ $json.cachedOutput }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        640,
        580
      ],
      "id": "9b73fcf6-265a-4e16-ad5f-d39bba1f0361",
      "name": "If2"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $json.main.app.mediaGroupSessionId }}",
        "value": "={{ $json.output }}",
        "keyType": "string",
        "expire": true,
        "ttl": 300
      },
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [
        940,
        700
      ],
      "id": "2bb799ec-bac5-4e41-93b3-95b3b3c447ae",
      "name": "Redis1",
      "credentials": {
        "redis": {
          "id": "J8VDBDm0YDijlL9C",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        340,
        580
      ],
      "id": "c645230c-1c62-4715-b334-581b898c7045",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "function replaceOrderLine(invoiceOutput, orderOutput) {\n  const lines = invoiceOutput.split('\\n');\n  lines[0] = orderOutput.split('\\n')[0];\n  \n  return lines.join('\\n');\n}\n\nconst result = $input.all().map(item => {\n  let invoiceOutput = item.json.output;\n  let orderOutput = item.json.cachedOutput;\n\n  if (item.json.output.includes('Invoice: N/A')) {\n    invoiceOutput = item.json.cachedOutput;\n    orderOutput = item.json.output;\n  }\n\n  const combinedOuput = replaceOrderLine(invoiceOutput, orderOutput);\n\n  return {\n    json: {\n      ...item.json,\n      output: combinedOuput,\n    }\n  }\n});\n\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        460
      ],
      "id": "89961555-b63e-4a04-8cb6-ffa72b093869",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1WgGnaWc2vrYeVhJMLS6wGLr62_LaTs5K1XYMlbKHu64",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('parseInvoiceInfo').item.json.output.sheet }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Customer": "---"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Customer",
              "displayName": "Customer",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Order Date",
              "displayName": "Order Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Order",
              "displayName": "Order",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "PO Code",
              "displayName": "PO Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Market Code",
              "displayName": "Market Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Invoice Date",
              "displayName": "Invoice Date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Invoice",
              "displayName": "Invoice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Code",
              "displayName": "Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "Unit Price",
              "displayName": "Unit Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "KM Code",
              "displayName": "KM Code",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "KM Quantity",
              "displayName": "KM Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        2440,
        460
      ],
      "id": "02387374-c1da-4e39-b4f8-8b67dc7c1148",
      "name": "addEmptyRow",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "QPWCBEBd1gVee3YC",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "amount": "={{ ($json.main.app.messageId % 2) * 3  }}"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -560,
        500
      ],
      "id": "ba133846-0c2d-4dcc-b332-dab423085a35",
      "name": "Wait",
      "webhookId": "5ca0722c-ab1b-49de-9a62-a01216d69d76"
    }
  ],
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Accounting Extractor Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "appRule",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Telegram2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "appRule": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Model": {
      "ai_languageModel": [
        [
          {
            "node": "Accounting Extractor Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Accounting Extractor Agent": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "parseInvoiceInfo": {
      "main": [
        [
          {
            "node": "createSheet",
            "type": "main",
            "index": 0
          },
          {
            "node": "splitItems",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "splitItems": {
      "main": [
        [
          {
            "node": "setItemData",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "createSheet": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "setItemData": {
      "main": [
        [
          {
            "node": "appendItemToSheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "appendItemToSheet": {
      "main": [
        [
          {
            "node": "addEmptyRow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Redis1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Redis1": {
      "main": [
        []
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "parseInvoiceInfo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "addEmptyRow": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "triggerCount": 0,
  "tags": []
}